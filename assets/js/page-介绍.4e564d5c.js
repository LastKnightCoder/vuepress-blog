(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{951:function(t,v,e){"use strict";e.r(v);var _=e(1),c=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"typescript是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript是什么"}},[t._v("#")]),t._v(" TypeScript是什么")]),t._v(" "),e("p",[e("code",[t._v("TypeScript")]),t._v(" 是什么? 引用官方的定义")]),t._v(" "),e("blockquote",[e("p",[t._v("TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source.")])]),t._v(" "),e("p",[t._v("简单翻译就是")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("TypeScript")]),t._v(" 是 "),e("code",[t._v("JavaScript")]),t._v(" 的超集，并且可以被编译成 "),e("code",[t._v("JavaScript")]),t._v("。它可以运行在任何浏览器，任何主机，任何操作系统上。并且它是开源的。")])]),t._v(" "),e("p",[t._v("看到这里你可能对 "),e("code",[t._v("TypeScript")]),t._v(" 还是没有什么感觉，其实在我看来 "),e("code",[t._v("TypeScript")]),t._v(" 是对 "),e("code",[t._v("JavaScript")]),t._v(" 做了各种限制，这里说的限制并不是贬义的意思，因为 "),e("code",[t._v("JavaScript")]),t._v(" 实在是太灵活了，很多的问题只有在运行的时候才会暴露出来，比如对于函数，即使定义时要求传两个参数，但是在使用时却可以传入任意的参数，所以你无法限制使用该函数的用户传入正确的参数，如果碰到不仔细看 "),e("code",[t._v("API")]),t._v(" 文档的用户，鬼知道它使用的时候会传入什么，出了问题说不定会甩锅你兼容性做的不好。而 "),e("code",[t._v("TypeScript")]),t._v(" 则限制了这一点，在使用时传入的参数必须与定义传入的相同，并且有提示每个参数的作用，用户使用该函数时必须按规定的来。")]),t._v(" "),e("h2",{attrs:{id:"typescript的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript的优势"}},[t._v("#")]),t._v(" TypeScript的优势")]),t._v(" "),e("p",[t._v("那么 "),e("code",[t._v("TypeScript")]),t._v(" 可以为我们带来什么好处：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("错误在编译时就可以暴露出来，而不必等到运行时才暴露出来")]),t._v(" "),e("p",[t._v("如下 "),e("code",[t._v("js")]),t._v(" 文件")]),t._v(" "),e("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/20200529101513.png",width:"50%"}}),t._v(" "),e("p",[t._v("如上，一不小心将变量名写错了，写成了 "),e("code",[t._v("MyNane")]),t._v("，这种错误是很有可能发生的，但是在很多的时候我们自己却很难发现，只有当我们运行该程序报错的时候，我们才有可能根据报错信息，确定报错的原因；更糟糕的是，如果报错的信息不明确，你几乎无法确定是哪里出现问题，到时候要靠一双肉眼去找出这么一个小小的不同，曾经我就有因为变量名写错的问题，我找了半个小时。但是如果我们使用 "),e("code",[t._v("TypeScript")]),t._v(" 的话，这样的问题在编译时就会被发现，如下 "),e("code",[t._v("ts")]),t._v(" 文件")]),t._v(" "),e("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/20200529101914.png",width:"70%"}}),t._v(" "),e("p",[t._v("我们可以发现，在 "),e("code",[t._v("MyNane")]),t._v(" 下面出现了红色的波浪线，将鼠标放在上面，还会贴心的给出提示。")])]),t._v(" "),e("li",[e("p",[t._v("智能提示")]),t._v(" "),e("p",[t._v("对于现代的程序员来说，代码的智能提示那是能够大大的提高工作效率的，不仅如此，还可以减少出错的概率，如果你手动写出一个对象的方法名，出错的概率可是很高的，特别是对于一些英语不好的同学。但是问题来了，因为 "),e("code",[t._v("JavaScript")]),t._v(" 不是静态类型，而是动态类型，所有的变量都使用 "),e("code",[t._v("var, let, const")]),t._v(" 声明，而不是像 "),e("code",[t._v("C")]),t._v(" 语言这样静态类型语言，不同的类型使用不同的关键字，如 "),e("code",[t._v("int, char[]")]),t._v(" 等等。所以这就意味着 "),e("code",[t._v("JavaScript")]),t._v(" 这个类型是可变的，一会儿这是字符串类型，一会儿是数字类型，编译器根本在编译阶段根本不能确定你是什么类型，所以无法给出相应类型的特有方法，比如字符串类型的 "),e("code",[t._v("toUpperCase()")]),t._v(" 方法，如下 "),e("code",[t._v("js")]),t._v(" 文件")]),t._v(" "),e("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/202005291040.gif",width:"60%"}}),t._v(" "),e("p",[t._v("如上，上面的函数的功能是将传入的单词首字母大写，我们只是简单的调用字符串对象的函数 "),e("code",[t._v("toUpperCase()")]),t._v("，但是我们发现当我们打出 "),e("code",[t._v("word.")]),t._v(" 时没有给出任何的提出，因为 "),e("code",[t._v("JavaScript")]),t._v(" 根本不能确定你传入的是不是字符串，毕竟 "),e("code",[t._v("JavaScript")]),t._v(" 是如此的灵活，使用时你可以传入任何类型的参数。但是对于 "),e("code",[t._v("TypeScript")]),t._v(" 就不一样了，因为它会对参数的类型做出限制，如下")]),t._v(" "),e("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/202005291046.gif",width:"60%"}}),t._v(" "),e("p",[t._v("我们限制了传入的参数必须为 "),e("code",[t._v("string")]),t._v(" 类型，在编译的阶段，我们能够肯定传入的一定是 "),e("code",[t._v("string")]),t._v(" 类型，所以在函数的方法里面，当我们输入 "),e("code",[t._v("word.")]),t._v(" 时会给出字符串对象的所有方法。除此之外，我们还规定了函数必须传入什么类型，这样用户在使用时就不能随便的传入参数，所有的一切必须按规定的来，这又无形的减少了 "),e("code",[t._v("bug")]),t._v(" 的产生，并且用户在调用该方法时，还会给出提出，需要传入什么参数类型，必要的时候还可以给出传入参数的意义，如下")]),t._v(" "),e("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/202005291057.gif",width:"60%"}})])]),t._v(" "),e("p",[e("code",[t._v("TypeScript")]),t._v(" 的好处还不止这一些，不过就我列举的这两个，就有足够的理由来学 "),e("code",[t._v("TypeScript")]),t._v(" 了，"),e("code",[t._v("TypeScript")]),t._v(" 更多的好处就需要你在使用的过程中慢慢理会了。")]),t._v(" "),e("Disqus")],1)}),[],!1,null,null,null);v.default=c.exports}}]);