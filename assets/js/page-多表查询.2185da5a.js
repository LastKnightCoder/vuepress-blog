(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{1092:function(t,s,a){"use strict";a.r(s);var e=a(1),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("所谓事务是指一系列的操作，这些操作\n要么同时成功，要么同时失败。比如转账，不能我这里转账成功，你那么收不到钱，那么钱就这么消失了? 如果事务执行成功了，那么就提交，如果有一条失败了，那么就需要进行回滚(即回到之前的状态)。与事务有关的三条语句为")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("start transaction")]),t._v(" "),a("ul",[a("li",[t._v("开启事务")])])]),t._v(" "),a("li",[a("code",[t._v("commit")]),t._v(" "),a("ul",[a("li",[t._v("提交事务")]),t._v(" "),a("li",[t._v("可手动提交，也可设置为自动提交")])])]),t._v(" "),a("li",[a("code",[t._v("roll back")]),t._v(" "),a("ul",[a("li",[t._v("回滚事务")]),t._v(" "),a("li",[t._v("当事务执行失败时自动自动，也可手动执行")])])])]),t._v(" "),a("p",[t._v("假设有这么一张表，里面存储的是用户名和余额信息")]),t._v(" "),a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql45.png"}}),t._v(" "),a("p",[t._v("现在张三要向李四转账 500 块，如下")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 张三账号-500 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 李四账号+500 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'李四'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("p",[t._v("如果我们不开启事务的话，那么当张三转了 500 块时，这时服务器崩溃了，李四没有收到钱，但是钱还是少了，这种情况是不能发生的，我们应当开启一个事务，这两个操作要么同时成功，要么同时失败。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 开启一个事务")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 张三账号-500")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'张三'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 李四账号+500")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'李四'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 提交事务")]),t._v("\n")])])]),a("p",[t._v("开启事务后，所有的操作都在临时日志文件中，"),a("code",[t._v("commit")]),t._v(" 操作是将临时日志中的内容写到数据库的存储引擎中，所以在提交事务之前，是不会对数据库中的内容进行修改的。而 "),a("code",[t._v("rollback")]),t._v(" 则是清空临时日志文件，之前没有进行提交的内容全部清除。")]),t._v(" "),a("p",[t._v("事务的步骤可以简述为下面几步")]),t._v(" "),a("ul",[a("li",[t._v("客户端连接数据库服务器，创建连接时创建此用户临时日志文件")]),t._v(" "),a("li",[t._v("开启事务以后，所有的操作都会先写入到临时日志文件中")]),t._v(" "),a("li",[t._v("所有的查询操作从表中查询，但会经过日志文件加工后才返回")]),t._v(" "),a("li",[t._v("如果事务提交则将日志文件中的数据写到表中，否则清空日志文件")])]),t._v(" "),a("p",[t._v("事务的提交分为自动提交和手动提交，在 "),a("code",[t._v("MySQL")]),t._v(" 命令行的默认设置下，事务都是自动提交的，即执行 "),a("code",[t._v("SQL")]),t._v(" 语句后就会马上执行 "),a("code",[t._v("COMMIT")]),t._v(" 操作。因此要显式地开启一个事务务须使用命令 "),a("code",[t._v("BEGIN")]),t._v(" 或 "),a("code",[t._v("START TRANSACTION")]),t._v("，或者执行命令 "),a("code",[t._v("SET AUTOCOMMIT=0")]),t._v("，用来禁止使用当前会话的自动提交。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("SET AUTOCOMMIT=0")]),t._v(" "),a("ul",[a("li",[t._v("禁止自动提交")])])]),t._v(" "),a("li",[a("strong",[t._v("SET AUTOCOMMIT=1")]),t._v(" "),a("ul",[a("li",[t._v("开启自动提交")])])])]),t._v(" "),a("h3",{attrs:{id:"事务的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的特性"}},[t._v("#")]),t._v(" 事务的特性")]),t._v(" "),a("p",[t._v("事务的四大特性 ACID")]),t._v(" "),a("ul",[a("li",[t._v("原子性(Atomicity)\n"),a("ul",[a("li",[t._v("每个事务都是一个整体，不可再拆分，事务中所有的 "),a("code",[t._v("SQL")]),t._v(" 语句要么都执行成功， 要么都失败。")])])]),t._v(" "),a("li",[t._v("一致性(Consistency)\n"),a("ul",[a("li",[t._v("事务在执行前数据库的状态与执行后数据库的状态保持一致。如：转账前 2 个人的 总金额是 2000，转账后 2 个人总金额也是 2000")])])]),t._v(" "),a("li",[t._v("隔离性(Isolation)\n"),a("ul",[a("li",[t._v("事务与事务之间不应该相互影响，执行时保持隔离的状态。")])])]),t._v(" "),a("li",[t._v("持久性(Durability)\n"),a("ul",[a("li",[t._v("一旦事务执行成功，对数据库的修改是持久的。就算关机，也是保存下来的。")])])])]),t._v(" "),a("p",[t._v("这篇文章"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60723043",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL事务：ACID特性的实现原理总结分析"),a("OutboundLink")],1),t._v("详细讲解了 MySQL 的事务，所以在这里我不多做介绍，因为讲的没人家好。")]),t._v(" "),a("h3",{attrs:{id:"事务的隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的隔离级别"}},[t._v("#")]),t._v(" 事务的隔离级别")]),t._v(" "),a("p",[t._v("事务在操作时的理想状态是所有的事务之间保持隔离，互不影响。但是因为并发操作，多个用户同时访问同一个数据时，可能引发并发访问的问题，如")]),t._v(" "),a("ul",[a("li",[t._v("脏读\n"),a("ul",[a("li",[t._v("一个事务读取到了另一个事务中尚未提交的数据")]),t._v(" "),a("li",[t._v("比如李四向张三转了 500 块，但是没有提交，这时张三读取数据，发现已经到账 500 块，跟李四说到账了，这时李四进行 "),a("code",[t._v("roll back")])])])]),t._v(" "),a("li",[t._v("不可重复读\n"),a("ul",[a("li",[t._v("一个事务中两次读取的数据内容不一致，要求的是一个事务中多次读取时数据是一致的，这是事务 "),a("code",[t._v("update")]),t._v(" 时引发的问题")]),t._v(" "),a("li",[t._v("两次查询输出的结果不同，到底哪次是对的? 不知道以哪次为准。 有的时候这不是一个问题，当然是后面的为准。但是我们可以考虑这样一种情况，比如银行程序需要将查询结果分别输出到电脑屏幕和发短信给客 户，结果在一个事务中针对不同的输出目的地进行的两次查询不一致，导致文件和屏幕中的结果不一致，银行工作 人员就不知道以哪个为准了。")]),t._v(" "),a("li",[t._v("脏读与不可重复读的区别在于：前者读到的是其他事务未提交的数据，后者读到的是其他事务已提交的数据")])])]),t._v(" "),a("li",[t._v("幻读\n"),a("ul",[a("li",[t._v("一个事务中两次读取的数据的数量不一致，要求在一个事务多次读取的数据的数量是一致的，这是 "),a("code",[t._v("insert")]),t._v(" 或 "),a("code",[t._v("delete")]),t._v(" 时引发的问题")]),t._v(" "),a("li",[t._v('幻读是事务非独立执行时发生的一种现象。例如事务 T1 对一个表中所有的行的某个数据项做了从 "1" 修改为 "2" 的操作，这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为 "1" 并且提交给数据库。而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读。')]),t._v(" "),a("li",[t._v("幻读和不可重复读都是读取了另一条已经提交的事务(这点就脏读不同)，所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体(比如数据的个数)。")])])])]),t._v(" "),a("p",[t._v("MySQL数据库有四种隔离级别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("read uncommitted")]),t._v(" "),a("ul",[a("li",[t._v("上面三种问题都有可能发生")])])]),t._v(" "),a("li",[a("code",[t._v("read committed")]),t._v(" "),a("ul",[a("li",[t._v("不可能发生脏读，因为只有读到已提交的数据")])])]),t._v(" "),a("li",[a("code",[t._v("repeatable read")]),t._v(" "),a("ul",[a("li",[t._v("可能发生幻读")]),t._v(" "),a("li",[t._v("这时 MySQL 的默认隔离级别")])])]),t._v(" "),a("li",[a("code",[t._v("serializable")]),t._v(" "),a("ul",[a("li",[t._v("所有的问题都不会发生")])])])]),t._v(" "),a("p",[t._v("上面的级别最低，下面的级别最高，隔离级别越高，性能越差，安全性越高。在 MySQL 数据库中设置事务的隔离级别")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("glogal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" 隔离级别名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" tx_isolation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'隔离级别名称'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports},1093:function(t,s,a){"use strict";a.r(s);var e=a(1),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("多表查询顾名思义就是同时查询多张表，假设有下面这么两张表(第一张是职员(emp)表，第二张是部门(dept)表)")]),t._v(" "),a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql35.png"}}),t._v(" "),a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql36.png"}}),t._v(" "),a("p",[t._v("现在我们同时查询这两张表")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n    emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们将得到下面这么一张表")]),t._v(" "),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql37.png"}})]),t._v(" "),a("p",[t._v("这张表的结果是两张表一一组合得到的，得到的结果也叫做笛卡尔积，我们可以看到很有的信息都是错误的，我们的目的就是去除这些无用的信息。")]),t._v(" "),a("h3",{attrs:{id:"内连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接"}},[t._v("#")]),t._v(" 内连接")]),t._v(" "),a("p",[t._v("用左边表的记录去匹配右边表的记录，如果符合条件的则显示。内连接分为")]),t._v(" "),a("ul",[a("li",[t._v("隐式内连接\n"),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("WHERE")]),t._v(" 条件指定")])])]),t._v(" "),a("li",[t._v("显示内连接\n"),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("INNER JOIN ... ON")]),t._v(" 语句")])])])]),t._v(" "),a("p",[t._v("比如现在我要在上面的笛卡尔积中筛选出 emp 表外键 dept_id 等于主表主键 id 的，那么分别使用隐式内连接和显式外连接的写法为")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#隐式写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n    emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dept\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("\n    emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显式写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" dept "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外连接"}},[t._v("#")]),t._v(" 外连接")]),t._v(" "),a("p",[t._v("为了演示外连接，在上面的部门表中新加入一个销售部")]),t._v(" "),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql38.png"}})]),t._v(" "),a("p",[t._v("外连接分为")]),t._v(" "),a("ul",[a("li",[t._v("左外连接")]),t._v(" "),a("li",[t._v("右外连接")])]),t._v(" "),a("p",[t._v("两者只要掌握一种即可，因为用另一种时，将二表的顺序交换即可。那什么是左外连接，就是在内连接的基础上，以左表为基准，显示左表的所有内容，如果右表没有对应的内容，那么显示为 "),a("code",[t._v("NULL")]),t._v("，现在我们进行一次内连接查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" dept "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# e是emp的别名")]),t._v("\n")])])]),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql39.png"}})]),t._v(" "),a("p",[t._v("现在我们进行一次左外连接查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" dept "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("因为左外连接查询是以左表(dept)为基准，左表的内容会全部显示出来，即销售部会被查询出来，而对应的员工表没有对应的元素，所以会显示空")]),t._v(" "),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql40.png"}})]),t._v(" "),a("p",[t._v("而右外连接与左外连接相反，是以右表为基准，现在如果我们将二表的位置交换，并且使用右外连接查询，得到的结果与上面的会是相同的")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" dept d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql41.png"}})]),t._v(" "),a("h3",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[t._v("#")]),t._v(" 子查询")]),t._v(" "),a("p",[t._v("所谓的子查询是指将查询得到的结果作为另一个查询语句的条件，比如我想查出薪资最高员工的信息，那么思路如下")]),t._v(" "),a("ul",[a("li",[t._v("查出最高的薪资是多少")]),t._v(" "),a("li",[t._v("匹配谁的薪资为最高薪资")])]),t._v(" "),a("p",[t._v("那么第一步查出的最高薪资就作为了第二步进行匹配的条件")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql42.png"}})]),t._v(" "),a("p",[t._v("子查询得到的结果有多种，例如")]),t._v(" "),a("ul",[a("li",[t._v("单行单列")]),t._v(" "),a("li",[t._v("单列多行")]),t._v(" "),a("li",[t._v("多行多列的值(表)")])]),t._v(" "),a("p",[t._v("当结果是单个列的值的时候，肯定在 "),a("code",[t._v("WHERE")]),t._v(" 后面作为条件，父查询使用比较运算符，如："),a("code",[t._v("> 、<、<>、 =")]),t._v(" 等。现在我要查询小于平均薪资的人有哪些，那么可以这么写")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql43.png"}})]),t._v(" "),a("p",[t._v("子查询结果是单列多行，结果集类似于一个数组，父查询使用 IN 运算符。查询工资大于5000的员工，来自于哪些部门")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n    t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n     dept t1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("\n    t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("center",[a("img",{attrs:{src:"https://gitee.com/lastknightcoder/blogimage/raw/master/img/mysql44.png"}})]),t._v(" "),a("p",[t._v("子查询结果只要是多列，肯定在FROM后面作为表")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 查询字段 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" （子查询）表别名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("子查询作为表需要取别名，否则这张表没有名称则无法访问表中的字段。查询出2011年以后入职的员工信息，包括部门名称")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" db1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("emp t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join_date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2011-1-1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" t3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dept d\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("\n    d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dept_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])],1)}),[],!1,null,null,null);s.default=r.exports}}]);